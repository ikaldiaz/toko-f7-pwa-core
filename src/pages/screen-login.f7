<template>
    <div class="page no-toolbar no-navbar no-swipeback">
      <div class="page-content login-screen-content">
        <div class="x-login-screen">
          <a href="#" class="button button-fill" @click="${closeLogin}">
            <i class="material-icons">close</i>
          </a>
        </div>
        <img data-src="icons/favicon.png" class="lazy lazy-fade-in logo-lazy" width="300" height="300" />
        <div class="login-screen-title">Login</div>
        <form>
          <div class="list">
            <ul>
              <li class="item-content item-input">
                <div class="item-inner">
                  <div class="item-title item-label">Email</div>
                  <div class="item-input-wrap">
                    <input type="text" name="email" placeholder="Your Email" value="${username}" @input="${updateUsername}" />
                  </div>
                </div>
              </li> 
              <li class="item-content item-input">
                <div class="item-inner">
                  <div class="item-title item-label">Password</div>
                  <div class="item-input-wrap">
                    <input type="password" name="password" placeholder="Your password" value="${password}" @input="${updatePassword}"  />
                  </div>
                </div>
              </li>
            </ul>
          </div>
          <div class="list inset block">
            <ul>
              <li>
                <a href="#" id="signin-button" class="button button-large button-fill 
                ${isValid ? '' : 'disabled'} 
                button-preloader 
                ${isLoading ? 'button-loading' : ''}"
                 @click="${signIn}">
                 <span class="preloader"></span>
                 <span>Sign In</span>
                </a>
              </li>
            </ul>
            <div class="block-footer">
              <p>Not registered yet?</p>
            </div>
            <ul>
              <li>
                <a href="/register/" class="button button-large button-fill">Register</a>
              </li>
            </ul>
          </div>
        </form>
      </div>
    </div>
  </template>
  <style>
  /* Screen Login */
  /* .x-login-screen{
    position:absolute;
    top:10px;
    right:10px;
  }
  img.logo-lazy {
    width: auto;
    height: 20%;
    display: block;
    margin-top: 30px;
    margin-left: auto;
    margin-right: auto;
  } */
  </style>
  <script>
    import { supabase, session } from '../js/supabase.js';

    async function signUpWithEmail(emailx, passx) {
      const { user, session, error } = await supabase.auth.signUp({
        email: emailx,
        password: passx,
      })

      if(!error) {
        console.log('success')
        return user
      }else{
        console.log('error');
        return error
      }
      console.log(user)
      console.log(session)
    }


    export default function (props, { $, $f7, $store, $f7router, $onMounted, $update }) {

      // Login screen demo data
      let username = '';
      let password = '';
      let isLoading = false;
      let isValid = false;
  
      function isEmailAddress(arg) {
        var pattern = /^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$/; 
        return arg.match(pattern) ? true : false;    
      }
  
      const updateUsername = (e) => {
        username = e.target.value;
        
        isEmailAddress(username) && password.length>8 ? isValid = true : isValid = false;
        $update();
      }
      const updatePassword = (e) => {
        password = e.target.value;
        isEmailAddress(username) && password.length>8 ? isValid = true : isValid = false;
        $update();
      }
  
      const client = $store.getters.client;
  
      const alertLoginData = () => {
        $f7.dialog.alert('Username: ' + username + '<br/>Password: ' + password, () => {
          $f7router.back('/');
        });
      }    
      
      const signIn = () => { 
  
  
        if (isEmailAddress(username) && password.length>8) {
          isLoading = true;
          $update();
          // console.log(signUpWithEmail(username, password));
          // if(signUpWithEmail(username, password)){
          //     isLoading = false;
          //     $update();
          //   $f7.dialog.alert('Yohooo, ' + user.email, () => {
          //     $f7.loginScreen.close();
          //   });
          // }else{
          //     isLoading = false;
          //     $update();
          // }
          signUpWithEmail(username, password)
          .then((user) =>{
              isLoading = false;
              $update();
              console.log(user);
          })
            .catch((error) => {
              
              isLoading = false;
              $update();
              console.log(error);
            })
          // signInWithEmailAndPassword(auth, username, password)
          // .then((userCredential) => { 
          //   // $f7.preloader.hide();
          //   // Signed in 
          //   const user = userCredential.user;
          //   // console.log(user);
          //   isLoading = false;
          //   $update();
          //   // ...
          //   $f7.dialog.alert('Yohooo, ' + user.email, () => {
          //     $f7.loginScreen.close();
          //   });
          // })
          // .catch((error) => {
            
          //   isLoading = false;
          //   $update();
            
          //   const errorCode = error.code;
          //   console.log(errorCode);
            
          //   var messageError = '';
  
          //   switch (errorCode) {
          //     case 'auth/invalid-email':
          //       messageError = 'Don\'t play with us, you have the wrong email'
          //       break;
          //     case 'auth/network-request-failed':
          //       messageError = 'Check your connection, please. Or maybe something\'s wrong with your internet provider'
          //       break;
          //     case 'auth/user-not-found':
          //       messageError = 'It\'s seem you are not registered yet'
          //       break;
          //     case 'auth/wrong-password':
          //       messageError = 'Your password is completely wrong, maybe you\'ve changed it. If you don\'t recognize that activity, We reccomend you to reset it. So you can get your account back'
          //       break;
          //     case 'auth/too-many-requests':
          //       messageError = 'Sorry, You\'ve try so much, wait until the next chance'
          //       break;
          //     default:
          //       messageError = 'Please contact us, so we know your problem'
          //       break;
          //   }
            
          //   // Create toast
          //   const errorToast = $f7.toast.create({
          //     text: messageError,
          //     closeTimeout: 2000,
          //     destroyOnClose: true,
          //   });
          //   // Open it
          //   errorToast.open();
  
  
          // });
          
  
        } else {
          // Create toast
          const errorToast = $f7.toast.create({
              text: "Idiot",
              closeTimeout: 2000,
              destroyOnClose: true,
            });
            // Open it
          errorToast.open();
          $f7.preloader.hide();
        }
  
  
        
      }
  
      const closeLogin = () => {
        $f7router.back('/');
      }
  
      // Lifecycle
      $onMounted(() => {
  
      });
  
      // Return render function
      return $render;
    }
  </script>