<template>
  <div class="page no-navbar no-toolbar no-swipeback">
    <div class="page-content login-screen-content">
      <div class="x-signup-screen">
        <a href="#" class="button button-fill" @click="${backToLogin}">
          <i class="material-icons">close</i>
        </a>
      </div> 
      <img id="signup-logo" data-src="icons/favicon.png" class="lazy lazy-fade-in logo-lazy" width="300" height="300"  />
      <div class="login-screen-title">Register</div>
      <form>
        <div class="list no-hairlines-md block">
          <ul>
          <li class="item-content item-input item-input-with-info">
            <div class="item-media">
              <i class="material-icons">person</i>
            </div>
            <div class="item-inner">
              <div class="item-title item-label">Name</div>
              <div class="item-input-wrap">
                <input type="text" value="${name}" @input="${updateName}" name="name" placeholder="John Doe" required validate />
                <span class="input-clear-button"></span>
                <div class="item-input-info">We sure that you have a good name</div>
              </div>
            </div>
          </li>

          <li class="item-content item-input item-input-with-info">
            <div class="item-media">
              <i class="material-icons">email</i>
            </div>
            <div class="item-inner">
              <div class="item-title item-label">E-mail</div>
              <div class="item-input-wrap">
                <input type="email" value="${email}" @input="${updateEmail}" name="email" placeholder="home@mail.com" required validate />
                <span class="input-clear-button"></span>
                <div class="item-input-info">You know what is email, right?</div>
              </div>
            </div>
          </li>

          <li class="item-content item-input item-input-with-info">
            <div class="item-media">
              <i class="material-icons">lock</i>
            </div>
            <div class="item-inner">
              <div class="item-title item-label">Password</div>
              <div class="item-input-wrap">
                <input type="password" value="${password}" @input="${updatePassword}" name="password" placeholder="********" required validate minlength="8" data-error-message="8 characters minimum"/>
                <span class="input-clear-button"></span>
                <div class="item-input-info">Make a good password, please</div>
              </div>
            </div>
          </li>
          </ul>
        </div>
        <div class="list inset block">
          <ul>
            <li>
              <a href="#" id="register-button" class="button button-fill 
              ${checkForm ? '' : 'disabled'} 
              button-preloader 
              ${isLoading ? 'button-loading' : ''}"
              @click="${signUp}" >
              <span class="preloader"></span>
              <span>Sign Up</span> 
              </a>
            </li> 
          </ul>
          <div class="block-footer">
            <p>When you click the Sign Up button, you are agree with our Terms and Condition.</p>
            <p><a href="#" class="link" @click="${backToLogin}" >Back to Login Page, not the Future</a></p>
          </div>
        </div>
      </form>
    </div>
  </div>
</template>
<style>
  /* Screen Login */
  .x-signup-screen{
    position:absolute;
    top:10px;
    right:10px;
  }
  img.logo-lazy {
    width: auto;
    height: 20%;
    display: block;
    margin-top: 30px;
    margin-left: auto;
    margin-right: auto;
  }
</style>
<script>
  import { supabase, signUp as signUpSupabase, isEmailAddress } from '../js/supabase.js';

  // async function signUpWithEmail(emailx, passx) {
  //   const { user, session, error } = await supabase.auth.signUp({
  //     email: emailx,
  //     password: passx,
  //   })

  //   if(!error) {
  //     console.log('success')
  //     return user
  //   }else{
  //     console.log('error');
  //     return error
  //   }
  //   console.log(user)
  //   console.log(session)
  // }

  export default function (props, {$, $f7, $store, $f7router, $onMounted, $update }) {
    let nameLocal = '';
    let email = '';
    let password = '';
    let isLoading = false;
    let checkForm = false;


    const updateName = (e) => {
      nameLocal = e.target.value;
      checkForm = isEmailAddress(email) && password.length>8 && nameLocal.length>5;
      checkForm ? $('#register-button').removeClass('disabled') : $('#register-button').addClass('disabled');
      $update();
    }
    const updateEmail = (e) => {
      email = e.target.value;
      checkForm = isEmailAddress(email) && password.length>8 && nameLocal.length>5;
      checkForm ? $('#register-button').removeClass('disabled') : $('#register-button').addClass('disabled');
      $update();
    }
    const updatePassword = (e) => {
      password = e.target.value;
      checkForm = isEmailAddress(email) && password.length>8 && nameLocal.length>5;
      checkForm ? $('#register-button').removeClass('disabled') : $('#register-button').addClass('disabled');
      $update();
    }

    const signUp = () => {
      // $f7.preloader.show();
      isLoading = true;
      $update();

      
      signUpSupabase(email, password)
      .then((user) =>{
        console.log(user);
        isLoading = false;
        $update();
      })
      .catch((error) => {
        console.log(error);
        isLoading = false;
        $update();
      })

      // createUserWithEmailAndPassword(auth, email, password)
      // .then((userCredential) => {
      //     // Signed in
      //     // console.log(userCredential);
      //     const user = userCredential.user;
      //     // console.log(user);
      //     // console.log(nameLocal);
      //     writeUserData(user);
      //     $f7.preloader.hide();
      // })
      // .catch((error) => {
      //   $f7.preloader.hide();
      //   const errorCode = error.code;
      //   const errorMessage = error.message;
      // });
    }

    const backToLogin = () => {
      // $f7router.back('/login/');
      $f7.loginScreen.close()
    }

    function writeUserData(user) {
      // const db = getDatabase();
      updateProfile(auth.currentUser, {
        displayName: nameLocal
      }).then(() => {
        set(ref(db, 'users/' + user.uid), {
          uid: user.uid,
          email: user.email,
          providerId: user.providerId, 
          emailVerified: user.emailVerified,
          displayName: nameLocal,
          phoneNumber: user.phoneNumber,
          photoURL: user.photoURL,
        });
        $f7router.back('/'); //navigate back
      }).catch((error) => {
        $f7router.back('/'); //navigate back
      });
      $f7.preloader.hide();
    }

    // Lifecycle
    $onMounted(() => {
      supabase.auth.onAuthStateChange((event, session) => {
        console.log(event, session)
      })
    });

    // Return render function
    return $render;
  }
</script>